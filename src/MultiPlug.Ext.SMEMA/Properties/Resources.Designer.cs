//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MultiPlug.Ext.SMEMA.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("MultiPlug.Ext.SMEMA.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /*!
        /// * Font Awesome Free 5.9.0 by @fontawesome - https://fontawesome.com
        /// * License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License)
        /// */
        ///.fa,.fab,.fal,.far,.fas{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;display:inline-block;font-style:normal;font-variant:normal;text-rendering:auto;line-height:1}.fa-lg{font-size:1.33333em;line-height:.75em;vertical-align:-.0667em}.fa-xs{font-size:.75em}.fa-sm{font-size:.875em}.fa-1x{font-size:1em}.fa- [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string all_min_css {
            get {
                return ResourceManager.GetString("all_min_css", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /*!
        /// * Font Awesome Free 5.9.0 by @fontawesome - https://fontawesome.com
        /// * License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License)
        /// */
        ///!function(){&quot;use strict&quot;;var c={},l={};try{&quot;undefined&quot;!=typeof window&amp;&amp;(c=window),&quot;undefined&quot;!=typeof document&amp;&amp;(l=document)}catch(c){}var h=(c.navigator||{}).userAgent,z=void 0===h?&quot;&quot;:h,v=c,a=l,m=(v.document,!!a.documentElement&amp;&amp;!!a.head&amp;&amp;&quot;function&quot;==typeof a.addEventListener&amp;&amp;a.createElement,~z.indexOf(&quot;MSIE&quot;)||z.indexOf(&quot;T [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string all_min_js {
            get {
                return ResourceManager.GetString("all_min_js", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap apple_touch_icon_png {
            get {
                object obj = ResourceManager.GetObject("apple_touch_icon_png", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to @functions{
        ///
        ///    string DrawEnabledIcon(bool theValue)
        ///    {
        ///        return (theValue) ? &quot;&lt;i class=\&quot;fas fa-lg fa-check\&quot;&gt;&lt;/i&gt;&quot; : &quot;&lt;i class=\&quot;fas fa-lg fa-times\&quot;&gt;&lt;/i&gt;&quot;;
        ///    }
        ///}
        ///
        ///&lt;div class=&quot;col-sm&quot;&gt;
        ///    &lt;div class=&quot;accordion downline-smemaio smemaio&quot;&gt;
        ///        &lt;div class=&quot;card&quot;&gt;
        ///            &lt;a role=&quot;button&quot;
        ///               data-toggle=&quot;collapse&quot;
        ///               href=&quot;#collapse-3&quot;
        ///               aria-expanded=&quot;true&quot;
        ///               aria-controls=&quot;collapse-3&quot;&gt;
        ///                &lt;div class=&quot;card-hea [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string AppsSMEMAMonitorDownlineColumn {
            get {
                return ResourceManager.GetString("AppsSMEMAMonitorDownlineColumn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to @model MultiPlug.Base.Http.EdgeApp
        ///
        ///&lt;!DOCTYPE html&gt;
        ///&lt;html lang=&quot;en&quot;&gt;
        ///
        ///&lt;head&gt;
        ///    &lt;meta charset=&quot;utf-8&quot;&gt;
        ///    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, shrink-to-fit=no&quot;&gt;
        ///    &lt;meta http-equiv=&quot;x-ua-compatible&quot; content=&quot;ie=edge&quot;&gt;
        ///    &lt;title&gt;@Model.Extension.Model.MachineName / @Model.Extension.Model.LaneName | SMEMA Monitor&lt;/title&gt;
        ///    &lt;base href=&quot;@Model.Context.Paths.Base&quot;&gt;
        ///    &lt;link rel=&quot;shortcut icon&quot; href=&quot;@Raw(Model.Context.Paths.Assets)ico/favicon.ico&quot; type=&quot;image/x-i [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string AppsSMEMAMonitorHome {
            get {
                return ResourceManager.GetString("AppsSMEMAMonitorHome", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///@functions{
        ///
        ///    string DrawEnabledIcon(bool theValue)
        ///    {
        ///        return (theValue) ? &quot;&lt;i class=\&quot;fas fa-lg fa-check\&quot;&gt;&lt;/i&gt;&quot; : &quot;&lt;i class=\&quot;fas fa-lg fa-times\&quot;&gt;&lt;/i&gt;&quot;;
        ///    }
        ///
        ///    string DrawLeftIcon(bool theValue)
        ///    {
        ///        return (theValue) ? &quot;&lt;i class=\&quot;fas fa-lg fa-arrow-left\&quot;&gt;&lt;/i&gt;&quot; : &quot;&lt;i class=\&quot;fas fa-lg fa-times\&quot;&gt;&lt;/i&gt;&quot;;
        ///    }
        ///
        ///    string DrawRightIcon(bool theValue)
        ///    {
        ///        return (theValue) ? &quot;&lt;i class=\&quot;fas fa-lg fa-arrow-right\&quot;&gt;&lt;/i&gt;&quot; : &quot;&lt;i class=\&quot;fas fa-lg fa-times\&quot; [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string AppsSMEMAMonitorInterlockColumn {
            get {
                return ResourceManager.GetString("AppsSMEMAMonitorInterlockColumn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to @model MultiPlug.Base.Http.EdgeApp
        ///
        ///&lt;!DOCTYPE html&gt;
        ///&lt;html lang=&quot;en&quot;&gt;
        ///
        ///&lt;head&gt;
        ///    &lt;meta charset=&quot;utf-8&quot;&gt;
        ///    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, shrink-to-fit=no&quot;&gt;
        ///    &lt;meta http-equiv=&quot;x-ua-compatible&quot; content=&quot;ie=edge&quot;&gt;
        ///    &lt;title&gt;Setup Required | SMEMA Monitor&lt;/title&gt;
        ///    &lt;base href=&quot;@Model.Context.Paths.Base&quot;&gt;
        ///    &lt;link rel=&quot;shortcut icon&quot; href=&quot;@Raw(Model.Context.Paths.Assets)ico/favicon.ico&quot; type=&quot;image/x-icon&quot; /&gt;
        ///    &lt;link rel=&quot;apple-touch-icon&quot; href=&quot;@Raw(M [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string AppsSMEMAMonitorLaneNotFound {
            get {
                return ResourceManager.GetString("AppsSMEMAMonitorLaneNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to     &lt;!--Navbar--&gt;
        ///    &lt;nav class=&quot;navbar navbar-expand-md fixed-top primary-color&quot;&gt;
        ///
        ///        &lt;!-- Navbar brand --&gt;
        ///        &lt;a class=&quot;navbar-brand&quot; href=&quot;#&quot;&gt;
        ///            &lt;img src=&quot;assets/MultiPlug.Ext.SMEMA/images/SMEMA-logo.jpg&quot;
        ///                 alt=&quot;&quot;
        ///                 height=&quot;50&quot;
        ///                 width=&quot;auto&quot;
        ///                 class=&quot;d-inline-block align-top&quot;&gt;
        ///        &lt;/a&gt;
        ///
        ///        &lt;!-- Collapse button --&gt;
        ///        &lt;button class=&quot;navbar-toggler&quot; type=&quot;button&quot; data-toggle=&quot;collapse&quot; data-target=&quot; [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string AppsSMEMAMonitorNavBar {
            get {
                return ResourceManager.GetString("AppsSMEMAMonitorNavBar", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to     &lt;!--Navbar--&gt;
        ///    &lt;nav class=&quot;navbar navbar-expand-md fixed-top primary-color&quot;&gt;
        ///
        ///        &lt;!-- Navbar brand --&gt;
        ///        &lt;a class=&quot;navbar-brand&quot; href=&quot;#&quot;&gt;
        ///            &lt;img src=&quot;assets/MultiPlug.Ext.SMEMA/images/SMEMA-logo.jpg&quot;
        ///                 alt=&quot;&quot;
        ///                 height=&quot;50&quot;
        ///                 width=&quot;auto&quot;
        ///                 class=&quot;d-inline-block align-top&quot;&gt;
        ///        &lt;/a&gt;
        ///
        ///        &lt;!-- Collapse button --&gt;
        ///        &lt;button class=&quot;navbar-toggler&quot; type=&quot;button&quot; data-toggle=&quot;collapse&quot; data-target=&quot; [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string AppsSMEMAMonitorNavBarSimple {
            get {
                return ResourceManager.GetString("AppsSMEMAMonitorNavBarSimple", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to @model MultiPlug.Base.Http.EdgeApp
        ///
        ///&lt;!DOCTYPE html&gt;
        ///&lt;html lang=&quot;en&quot;&gt;
        ///
        ///&lt;head&gt;
        ///    &lt;meta charset=&quot;utf-8&quot;&gt;
        ///    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, shrink-to-fit=no&quot;&gt;
        ///    &lt;meta http-equiv=&quot;x-ua-compatible&quot; content=&quot;ie=edge&quot;&gt;
        ///    &lt;title&gt;Setup Required | SMEMA Monitor&lt;/title&gt;
        ///    &lt;base href=&quot;@Model.Context.Paths.Base&quot;&gt;
        ///    &lt;link rel=&quot;shortcut icon&quot; href=&quot;@Raw(Model.Context.Paths.Assets)ico/favicon.ico&quot; type=&quot;image/x-icon&quot; /&gt;
        ///    &lt;link rel=&quot;apple-touch-icon&quot; href=&quot;@Raw(M [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string AppsSMEMAMonitorNotSetup {
            get {
                return ResourceManager.GetString("AppsSMEMAMonitorNotSetup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///@functions{
        ///    string Lane(string theGuid, string theMachineName, string theLaneName)
        ///    {
        ///        return @&quot;&lt;li class=&quot;&quot;list-group-item d-flex justify-content-between align-items-center list-group-item-action&quot;&quot;&gt;&quot; +
        ///            @&quot;&lt;a class=&quot;&quot;&quot;&quot; href=&quot;&quot;/apps/multiplug.ext.SMEMA/IPC-SMEMA-9851-Monitor/?id=&quot; + theGuid + @&quot;&quot;&quot;&gt;&quot; + theMachineName + &quot; / &quot; + theLaneName + &quot;&lt;/a&gt;&quot; +
        ///            @&quot;&lt;div class=&quot;&quot;btn-group pull-right&quot;&quot; role=&quot;&quot;group&quot;&quot; aria-label=&quot;&quot;Basic example2&quot;&quot;&gt;&quot; +
        ///            @&quot;&lt;a href=&quot;&quot;/apps [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string AppsSMEMAMonitorSelectLaneModal {
            get {
                return ResourceManager.GetString("AppsSMEMAMonitorSelectLaneModal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;div class=&quot;modal fade hide&quot;
        ///     id=&quot;Shutdown-modal&quot;
        ///     tabindex=&quot;-1&quot;
        ///     role=&quot;dialog&quot;
        ///     aria-labelledby=&quot;Shutdown-modal&quot;
        ///     aria-hidden=&quot;true&quot;&gt;
        ///    &lt;div class=&quot;modal-dialog modal-xl&quot; role=&quot;document&quot;&gt;
        ///        &lt;div class=&quot;modal-content&quot;&gt;
        ///            &lt;div class=&quot;modal-header&quot;&gt;
        ///                &lt;div class=&quot;title-icon&quot;&gt;
        ///                    &lt;i class=&quot;fas fa-power-off fa-2x mr-3&quot;&gt;&lt;/i&gt;
        ///                    &lt;h5 class=&quot;modal-title&quot; id=&quot;selectLaneLongTitle&quot;&gt;Shut down host device&lt;/h5&gt;
        ///              [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string AppsSMEMAMonitorShutdownModal {
            get {
                return ResourceManager.GetString("AppsSMEMAMonitorShutdownModal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to @functions{
        ///    string DrawDirectionIcon(bool theValue)
        ///    {
        ///        return (theValue) ? &quot;&lt;i class=\&quot;fas fa-lg fa-angle-double-left\&quot;&gt;&lt;/i&gt;&quot; : &quot;&lt;i class=\&quot;fas fa-lg fa-angle-double-right\&quot;&gt;&lt;/i&gt;&quot;;
        ///    }
        ///}
        ///
        ///&lt;style&gt;
        ///    .btn-sq-sm {
        ///      width: 50px;
        ///      height: 50px;
        ///      margin: 0px;
        ///      padding: inherit;
        ///      margin-top: 2px;
        ///    }
        ///
        ///    table.table td.td-btn-clear {
        ///        padding: 0px;
        ///    }
        ///
        ///    .divert-rotate-45 {
        ///        -webkit-transform: rotate(45deg);
        ///        -moz-transf [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string AppsSMEMAMonitorSMEMAIOContainer {
            get {
                return ResourceManager.GetString("AppsSMEMAMonitorSMEMAIOContainer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to @functions{
        ///
        ///    string DrawEnabledIcon(bool theValue)
        ///    {
        ///        return (theValue) ? &quot;&lt;i class=\&quot;fas fa-lg fa-check\&quot;&gt;&lt;/i&gt;&quot; : &quot;&lt;i class=\&quot;fas fa-lg fa-times\&quot;&gt;&lt;/i&gt;&quot;;
        ///    }
        ///}
        ///
        ///&lt;div class=&quot;col-sm&quot;&gt;
        ///    &lt;!--accordion class/id must be unique--&gt;
        ///    &lt;div class=&quot;accordion upline-smemaio smemaio&quot;&gt;
        ///        &lt;div class=&quot;card&quot;&gt;
        ///            &lt;a role=&quot;button&quot;
        ///               data-toggle=&quot;collapse&quot;
        ///               href=&quot;#collapse-1&quot;
        ///               aria-expanded=&quot;true&quot;
        ///               aria-controls=&quot;collap [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string AppsSMEMAMonitorUplineColumn {
            get {
                return ResourceManager.GetString("AppsSMEMAMonitorUplineColumn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;div class=&quot;modal fade hide&quot;
        ///     id=&quot;Connection-modal&quot;
        ///     tabindex=&quot;-1&quot;
        ///     role=&quot;dialog&quot;
        ///     aria-labelledby=&quot;Connection-modalTitle&quot;
        ///     aria-hidden=&quot;true&quot;
        ///     data-backdrop=&quot;static&quot; data-keyboard=&quot;false&quot;&gt;
        ///    &lt;div class=&quot;modal-dialog modal-xl&quot; role=&quot;document&quot;&gt;
        ///        &lt;div class=&quot;modal-content&quot;&gt;
        ///            &lt;div class=&quot;modal-header&quot;&gt;
        ///                &lt;div class=&quot;title-icon&quot;&gt;
        ///                    &lt;i class=&quot;fas fa-exclamation-triangle fa-2x mr-3&quot;&gt;&lt;/i&gt;
        ///                    &lt;h5 class=&quot;modal-ti [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string AppsSMEMAMonitorWebSocketReconnectModal {
            get {
                return ResourceManager.GetString("AppsSMEMAMonitorWebSocketReconnectModal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /*!
        /// * Bootstrap v4.3.1 (https://getbootstrap.com/)
        /// * Copyright 2011-2019 The Bootstrap Authors
        /// * Copyright 2011-2019 Twitter, Inc.
        /// * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
        /// */:root{--blue:#007bff;--indigo:#6610f2;--purple:#6f42c1;--pink:#e83e8c;--red:#dc3545;--orange:#fd7e14;--yellow:#ffc107;--green:#28a745;--teal:#20c997;--cyan:#17a2b8;--white:#fff;--gray:#6c757d;--gray-dark:#343a40;--primary:#007bff;--secondary:#6c757d;--success:#28a745;--info:#17a2b8;--warning:#ffc [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string bootstrap_min_css {
            get {
                return ResourceManager.GetString("bootstrap_min_css", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /*!
        ///  * Bootstrap v4.3.1 (https://getbootstrap.com/)
        ///  * Copyright 2011-2019 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
        ///  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
        ///  */
        ///!function(t,e){&quot;object&quot;==typeof exports&amp;&amp;&quot;undefined&quot;!=typeof module?e(exports,require(&quot;jquery&quot;),require(&quot;popper.js&quot;)):&quot;function&quot;==typeof define&amp;&amp;define.amd?define([&quot;exports&quot;,&quot;jquery&quot;,&quot;popper.js&quot;],e):e((t=t||self).bootstrap={},t.jQuery,t.Popper)}(this,function(t,g,u){&quot;use s [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string bootstrap_min_js {
            get {
                return ResourceManager.GetString("bootstrap_min_js", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] fa_solid_900_woff2 {
            get {
                object obj = ResourceManager.GetObject("fa_solid_900_woff2", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
        /// </summary>
        internal static System.Drawing.Icon favicon {
            get {
                object obj = ResourceManager.GetObject("favicon", resourceCulture);
                return ((System.Drawing.Icon)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /*! jQuery v3.4.1 | (c) JS Foundation and other contributors | jquery.org/license */
        ///!function(e,t){&quot;use strict&quot;;&quot;object&quot;==typeof module&amp;&amp;&quot;object&quot;==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error(&quot;jQuery requires a window with a document&quot;);return t(e)}:t(e)}(&quot;undefined&quot;!=typeof window?window:this,function(C,e){&quot;use strict&quot;;var t=[],E=C.document,r=Object.getPrototypeOf,s=t.slice,g=t.concat,u=t.push,i=t.indexOf,n={},o=n.toString,v=n.hasOwnProperty,a=v.toStrin [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string jquery_3_4_1_min_js {
            get {
                return ResourceManager.GetString("jquery_3_4_1_min_js", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to $(&quot;#btn-newlane&quot;).click(function () {
        ///    $(&apos;#lanesTable tr:last&apos;).before(NewLane());
        ///
        ///    $(&quot;.btn-deletelanetemp&quot;).click(function (event) {
        ///        event.preventDefault();
        ///        $(this).closest(&quot;tr&quot;).remove();
        ///    });
        ///
        ///});
        ///
        ///$(&quot;.btn-deletelane&quot;).click(function (event) {
        ///    event.preventDefault();
        ///
        ///    var theRow = $(this).closest(&quot;tr&quot;);
        ///
        ///    $.post($(this).attr(&apos;href&apos;), function (data) {
        ///
        ///    })
        ///    .done(function () {
        ///        theRow.remove();
        ///    });
        ///});
        ///
        ///function NewLane() {
        ///    [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string lanes_js {
            get {
                return ResourceManager.GetString("lanes_js", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /*!
        /// * Material Design for Bootstrap 4
        /// * Version: MDB FREE 4.8.3
        /// *
        /// *
        /// * Copyright: Material Design for Bootstrap
        /// * https://mdbootstrap.com/
        /// *
        /// * Read the license: https://mdbootstrap.com/general/license/
        /// *
        /// *
        /// * Documentation: https://mdbootstrap.com/
        /// *
        /// * Getting started: https://mdbootstrap.com/docs/jquery/getting-started/download/
        /// *
        /// * Tutorials: https://mdbootstrap.com/education/bootstrap/
        /// *
        /// * Templates: https://mdbootstrap.com/templates/
        /// *
        /// * Support: https://mdbootstrap.c [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string mdb_min_css {
            get {
                return ResourceManager.GetString("mdb_min_css", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to var WOW;jQuery.easing.jswing=jQuery.easing.swing,jQuery.extend(jQuery.easing,{def:&quot;easeOutQuad&quot;,swing:function(t,e,n,i,a){return jQuery.easing[jQuery.easing.def](t,e,n,i,a)},easeInQuad:function(t,e,n,i,a){return i*(e/=a)*e+n},easeOutQuad:function(t,e,n,i,a){return-i*(e/=a)*(e-2)+n},easeInOutQuad:function(t,e,n,i,a){return(e/=a/2)&lt;1?i/2*e*e+n:-i/2*(--e*(e-2)-1)+n},easeInCubic:function(t,e,n,i,a){return i*(e/=a)*e*e+n},easeOutCubic:function(t,e,n,i,a){return i*((e=e/a-1)*e*e+1)+n},easeInOutCubic:function(t,e, [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string mdb_min_js {
            get {
                return ResourceManager.GetString("mdb_min_js", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap monitor_background_jpg {
            get {
                object obj = ResourceManager.GetObject("monitor_background_jpg", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /*
        /// Copyright (C) Federico Zivolo 2018
        /// Distributed under the MIT License (license terms are at http://opensource.org/licenses/MIT).
        /// */(function(e,t){&apos;object&apos;==typeof exports&amp;&amp;&apos;undefined&apos;!=typeof module?module.exports=t():&apos;function&apos;==typeof define&amp;&amp;define.amd?define(t):e.Popper=t()})(this,function(){&apos;use strict&apos;;function e(e){return e&amp;&amp;&apos;[object Function]&apos;==={}.toString.call(e)}function t(e,t){if(1!==e.nodeType)return[];var o=getComputedStyle(e,null);return t?o[t]:o}function o(e){return&apos;HTML&apos;===e.nodeNam [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string popper_min_js {
            get {
                return ResourceManager.GetString("popper_min_js", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] Roboto_Bold_ttf {
            get {
                object obj = ResourceManager.GetObject("Roboto_Bold_ttf", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] Roboto_Bold_woff {
            get {
                object obj = ResourceManager.GetObject("Roboto_Bold_woff", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] Roboto_Bold_woff2 {
            get {
                object obj = ResourceManager.GetObject("Roboto_Bold_woff2", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] Roboto_Light_woff2 {
            get {
                object obj = ResourceManager.GetObject("Roboto_Light_woff2", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] Roboto_Medium_woff2 {
            get {
                object obj = ResourceManager.GetObject("Roboto_Medium_woff2", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] Roboto_Regular_ttf {
            get {
                object obj = ResourceManager.GetObject("Roboto_Regular_ttf", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] Roboto_Regular_woff {
            get {
                object obj = ResourceManager.GetObject("Roboto_Regular_woff", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] Roboto_Regular_woff2 {
            get {
                object obj = ResourceManager.GetObject("Roboto_Regular_woff2", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to @model MultiPlug.Base.Http.EdgeApp
        ///
        ///&lt;section class=&quot;row-fluid&quot;&gt;
        ///
        ///    &lt;div class=&quot;row-fluid&quot;&gt;
        ///        &lt;div class=&quot;box&quot;&gt;
        ///            &lt;div class=&quot;span2&quot;&gt;
        ///                &lt;a style=&quot;line-height: 52px;&quot; href=&quot;@Raw(Model.Context.Paths.Home)&quot;&gt;&lt;img alt=&quot;SMEMA Logo&quot; src=&quot;@Raw(Model.Context.Paths.Assets)images/SMEMA-small.png&quot;&gt;&lt;/a&gt;
        ///            &lt;/div&gt;
        ///            &lt;div class=&quot;span8&quot;&gt;
        ///                &lt;p style=&quot;font-size:26px; line-height: 54px; text-align: center; margin: 0px;&quot;&gt;About&lt;/p&gt;
        ///            &lt;/div&gt;
        ///   [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SettingsAbout {
            get {
                return ResourceManager.GetString("SettingsAbout", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to @model MultiPlug.Base.Http.EdgeApp
        ///
        ///@functions
        ///{
        ///    string isConnected(bool theValue)
        ///    {
        ///        return (theValue) ? &quot;&lt;i class=\&quot;icon-ok icon-large\&quot;&gt;&lt;/i&gt;&quot; : &quot;&lt;i class=\&quot;icon-remove icon-large\&quot;&gt;&lt;/i&gt;&quot;;
        ///    }
        ///    string isEnabled(bool? theValue)
        ///    {
        ///        return (theValue.Value) ? &quot;checked&quot; : &quot;&quot;;
        ///    }
        ///}
        ///
        ///&lt;form action=&quot;&quot; method=&quot;post&quot; accept-charset=&quot;utf-8&quot; enctype=&quot;application/x-www-form-urlencoded&quot;&gt;
        ///    &lt;input type=&quot;hidden&quot; name=&quot;Guid&quot; value=&quot;@Model.Extension.Model.Guid&quot;&gt;
        ///    &lt;secti [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SettingsBoardAvailable {
            get {
                return ResourceManager.GetString("SettingsBoardAvailable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to @model MultiPlug.Base.Http.EdgeApp
        ///&lt;form action=&quot;&quot; method=&quot;post&quot; accept-charset=&quot;utf-8&quot; enctype=&quot;application/x-www-form-urlencoded&quot; autocomplete=&quot;off&quot;&gt;
        ///    &lt;section class=&quot;row-fluid&quot;&gt;
        ///
        ///        &lt;div class=&quot;row-fluid&quot;&gt;
        ///            &lt;div class=&quot;box&quot;&gt;
        ///                &lt;div class=&quot;span4&quot;&gt;
        ///                    &lt;a style=&quot;line-height: 52px;&quot; href=&quot;@Raw(Model.Context.Paths.Home)&quot;&gt;&lt;img alt=&quot;SMEMA Logo&quot; src=&quot;@Raw(Model.Context.Paths.Assets)images/SMEMA-small.png&quot;&gt;&lt;/a&gt;
        ///                &lt;/div&gt;
        ///                &lt;div  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SettingsHome {
            get {
                return ResourceManager.GetString("SettingsHome", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to @model MultiPlug.Base.Http.EdgeApp
        ///
        ///@functions
        ///{
        ///    string isConnected(bool theValue)
        ///    {
        ///        return (theValue) ? &quot;&lt;i class=\&quot;icon-ok icon-large\&quot;&gt;&lt;/i&gt;&quot; : &quot;&lt;i class=\&quot;icon-remove icon-large\&quot;&gt;&lt;/i&gt;&quot;;
        ///    }
        ///    string isEnabled(bool theValue)
        ///    {
        ///        return (theValue) ? &quot;checked&quot; : string.Empty;
        ///    }
        ///    string isEnabled(bool? theValue)
        ///    {
        ///        return (theValue.Value) ? &quot;checked&quot; : string.Empty;
        ///    }
        ///    string isChecked(int theValue1, int theValue2)
        ///    {
        ///        return [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SettingsInterlock {
            get {
                return ResourceManager.GetString("SettingsInterlock", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to @model MultiPlug.Base.Http.EdgeApp
        ///
        ///@functions
        ///{
        ///    string isCurrentLoggingLevel(int theLevel)
        ///    {
        ///        return (@Model.Extension.Model.LoggingLevel == theLevel) ? &quot;selected&quot; : &quot;&quot;;
        ///    }
        ///
        ///    string isEnabled(bool theValue)
        ///    {
        ///        return (theValue) ? &quot;checked&quot; : string.Empty;
        ///    }
        ///
        ///}
        ///
        ///&lt;form action=&quot;&quot; method=&quot;post&quot; accept-charset=&quot;utf-8&quot; enctype=&quot;application/x-www-form-urlencoded&quot; autocomplete=&quot;off&quot;&gt;
        ///    &lt;input type=&quot;hidden&quot; name=&quot;Guid&quot; value=&quot;@Model.Extension.Model.Guid&quot;&gt;
        ///     [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SettingsLane {
            get {
                return ResourceManager.GetString("SettingsLane", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to @model MultiPlug.Base.Http.EdgeApp
        ///
        ///@functions
        ///{
        ///    string isConnected(bool theValue)
        ///    {
        ///        return (theValue) ? &quot;&lt;i class=\&quot;icon-ok icon-large\&quot;&gt;&lt;/i&gt;&quot; : &quot;&lt;i class=\&quot;icon-remove icon-large\&quot;&gt;&lt;/i&gt;&quot;;
        ///    }
        ///    string isEnabled(bool? theValue)
        ///    {
        ///        return (theValue.Value) ? &quot;checked&quot; : &quot;&quot;;
        ///    }
        ///}
        ///
        ///&lt;form action=&quot;&quot; method=&quot;post&quot; accept-charset=&quot;utf-8&quot; enctype=&quot;application/x-www-form-urlencoded&quot;&gt;
        ///    &lt;input type=&quot;hidden&quot; name=&quot;Guid&quot; value=&quot;@Model.Extension.Model.Guid&quot;&gt;
        ///    &lt;secti [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SettingsMachineReady {
            get {
                return ResourceManager.GetString("SettingsMachineReady", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to @model MultiPlug.Base.Http.EdgeApp
        ///@functions {
        ///    public string NavLocationIsHome()
        ///    {
        ///        return Model.Context.Paths.Current == Model.Context.Paths.Home ? &quot;active&quot; : string.Empty;
        ///    }
        ///
        ///    public string NavLocationIsLane()
        ///    {
        ///        return Model.Context.Paths.Current == Model.Context.Paths.Home + &quot;lane/&quot; || Model.Context.Paths.Current == &quot;lane/programmable-event/&quot; ? &quot;active&quot; : string.Empty;
        ///    }
        ///
        ///    public string NavLocationIsBoardAvailable()
        ///    {
        ///        return Model.Contex [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SettingsNavigation {
            get {
                return ResourceManager.GetString("SettingsNavigation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to @model MultiPlug.Base.Http.EdgeApp
        ///
        ///@functions
        ///{
        ///    string isEnabled(bool theValue)
        ///    {
        ///        return (theValue) ? &quot;checked&quot; : &quot;&quot;;
        ///    }
        ///    string isSelected(int CurrentValue, int theValue)
        ///    {
        ///        return (CurrentValue == theValue) ? &quot;selected&quot; : &quot;&quot;;
        ///    }
        ///}
        ///&lt;form action=&quot;&quot; method=&quot;post&quot; accept-charset=&quot;utf-8&quot; enctype=&quot;application/x-www-form-urlencoded&quot; autocomplete=&quot;off&quot;&gt;
        ///    &lt;input type=&quot;hidden&quot; name=&quot;Guid&quot; value=&quot;@Model.Extension.Model.Guid&quot;&gt;
        ///    &lt;section class=&quot;row-fluid&quot;&gt;
        ///
        ///  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SettingsProgrammableEvent {
            get {
                return ResourceManager.GetString("SettingsProgrammableEvent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap SMEMA_logo_jpg {
            get {
                object obj = ResourceManager.GetObject("SMEMA_logo_jpg", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap SMEMA_small_png {
            get {
                object obj = ResourceManager.GetObject("SMEMA_small_png", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to function DrawEnabledIcon(e, a, t) { e.html(a == t ? &apos;&lt;i class=&quot;fas fa-lg fa-check&quot;&gt;&lt;/i&gt;&apos; : &apos;&lt;i class=&quot;fas fa-lg fa-times&quot;&gt;&lt;/i&gt;&apos;) } function DrawLeftIcon(e, a) { e.html(&quot;1&quot; == a ? &apos;&lt;i class=&quot;fas fa-lg fa-arrow-left&quot;&gt;&lt;/i&gt;&apos; : &apos;&lt;i class=&quot;fas fa-lg fa-times&quot;&gt;&lt;/i&gt;&apos;), UpdateColour(e, a, &quot;btn-smema-unblocked&quot;, &quot;btn-smema-blocked&quot;) } function DrawRightIcon(e, a) { e.html(&quot;1&quot; == a ? &apos;&lt;i class=&quot;fas fa-lg fa-arrow-right&quot;&gt;&lt;/i&gt;&apos; : &apos;&lt;i class=&quot;fas fa-lg fa-times&quot;&gt;&lt;/i&gt;&apos;), UpdateColour(e, a, &quot;btn-smema-unblocked&quot;, &quot;btn-smema [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string smemaio_min_js {
            get {
                return ResourceManager.GetString("smemaio_min_js", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to @import url(all.min.css);.card-header .btn-link,.modal-header{color:#fff!important}.accordion .card-header h5:after,.accordion .card-header h6:after{content:&quot;\f068&quot;;font-family:&apos;Font Awesome 5 Free&apos;;font-weight:900;float:right}body{padding-top:95px;background-color:#f2f2f2}.card-body{background-color:#fff}ul li a{font-weight:400;color:#000}a.nav-link,ul li a:hover{color:#666}.form-inline label:not(:last-child),i.fa{margin-right:.5rem}.form-inline label{margin-left:.5rem}.modal-header{background-color:#6c757 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string style_min_css {
            get {
                return ResourceManager.GetString("style_min_css", resourceCulture);
            }
        }
    }
}
